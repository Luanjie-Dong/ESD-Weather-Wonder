volumes:
  rabbitmq_config:
    name: esd_rabbitmq_config

networks:
  esd-weatherwonder:
    driver: bridge
    name: esd-weatherwonder

services:
    # AMQP messaging
    rabbitmq:
        image: rabbitmq:3-management
        environment:
        - RABBITMQ_DEFAULT_PASS=secret
        - RABBITMQ_DEFAULT_USER=myuser
        ports:
        - "5672:5672"  # For RabbitMQ server
        - "15672:15672"  # For RabbitMQ management UI
        restart: on-failure
        volumes: 
        - rabbitmq_config:/var/lib/rabbitmq
        networks:
        - esd-weatherwonder

    # user microservice
    user:
        build: ./user
        # ports:
        # - '5001:5001'
        env_file:
        - ./user/.env
        depends_on:
        - rabbitmq
        restart: on-failure
        networks:
        - esd-weatherwonder

    # location microservice
    location:
        build: ./location
        # ports:
        # - '5002:5002'
        env_file:
        - ./location/.env
        depends_on:
        - rabbitmq
        restart: on-failure
        networks:
        - esd-weatherwonder

    # location_weather microservice
    location_weather:
        build: ./location_weather
        ports:
        - '5003:5003'
        env_file:
        - ./location_weather/.env
        depends_on:
        - rabbitmq
        restart: on-failure
        networks:
        - esd-weatherwonder

    # geocoding microservice
    geocoding:
        build: 
            context: ./geocoding
            dockerfile: Dockerfile.encoder
        # ports:
        #   - '5004:5004'
        env_file:
        - ./geocoding/.env
        restart: on-failure
        networks:
        - esd-weatherwonder
    
    # weather microservice
    weather:
        build: ./weather
        # ports:
        # - '8081:8081'
        env_file:
        - ./weather/src/main/resources/.env
        restart: on-failure
        networks:
        - esd-weatherwonder

    # emergency_monitoring microservice
    emergency_monitoring:
        build: ./emergency_monitoring
        # ports:
        # - '8082:8082'
        env_file:
        - ./emergency_monitoring/src/main/resources/.env
        depends_on:
        - rabbitmq
        restart: on-failure
        networks:
        - esd-weatherwonder
        environment:
          RABBITMQ_HOST: rabbitmq

    add_a_location:
      build: 
        context: ./add_a_location
        dockerfile: Dockerfile
      # ports:
      #   - '5010:5010'
      env_file:
        - ./add_a_location/.env
      restart: on-failure
      depends_on:
        - location
        - geocoding
        - poll_weather_forecast
      networks:
        - esd-weatherwonder

    # notification microservice
    notification:
        build: ./notification
        # ports:
        # - '8083:8083'
        env_file:
        - ./notification/src/main/resources/.env
        depends_on:
        - rabbitmq
        restart: on-failure
        networks:
        - esd-weatherwonder
        environment:
          RABBITMQ_HOST: rabbitmq

    # notify weather forecast microservice
    notify_weather_forecast:
        build: ./notify_weather_forecast
        # ports:
        # - '5020:5020'
        env_file:
        - ./notify_weather_forecast/.env
        depends_on:
        - user
        - location_weather
        - rabbitmq
        restart: on-failure
        networks:
        - esd-weatherwonder

    # poll_weather_forecast microservice
    poll_weather_forecast:
        build: ./poll_weather_forecast
        ports:
        - '5005:5005'
        env_file:
        - ./poll_weather_forecast/.env
        depends_on:
        - location
        - weather
        - location_weather
        restart: on-failure
        networks:
        - esd-weatherwonder

    
